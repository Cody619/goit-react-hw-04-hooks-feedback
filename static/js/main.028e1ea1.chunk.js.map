{"version":3,"sources":["components/Statistics.js","components/FeedbackOptions.js","components/Section.js","components/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","props","good","neutral","bad","total","positivePercentage","FeedbackOptions","onLeaveFeedback","options","map","name","onClick","Section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","useMemo","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAGaA,EAAa,SAACC,GACzB,IAAQC,EAAkDD,EAAlDC,KAAMC,EAA4CF,EAA5CE,QAASC,EAAmCH,EAAnCG,IAAKC,EAA8BJ,EAA9BI,MAAOC,EAAuBL,EAAvBK,mBAEnC,OACE,gCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,EAAT,OACA,wCAAWC,EAAX,OACA,mDAAsBC,EAAtB,YCTOC,EAAkB,SAACN,GAC9B,IAAQO,EAA6BP,EAA7BO,gBAAiBC,EAAYR,EAAZQ,QACzB,OACE,8BACGA,EAAQC,KAAI,SAACC,GACZ,OACE,wBAAQC,QAAS,kBAAMJ,EAAgBG,IAAvC,SACGA,GADgDA,SCNhDE,EAAU,SAACZ,GACtB,IAAQa,EAAoBb,EAApBa,MAAOC,EAAad,EAAbc,SAEf,OACE,oCACE,6BAAKD,IACJC,MCNMC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7B,OAAO,4BAAIA,KCGAC,EAAM,WACjB,MAAwBC,mBAAS,GAAjC,mBAAOjB,EAAP,KAAakB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOhB,EAAP,KAAgBkB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOf,EAAP,KAAYkB,EAAZ,KAoBMjB,EAAQkB,mBAAQ,WACpB,OAAOrB,EAAOC,EAAUC,IACvB,CAACF,EAAMC,EAASC,IAEbE,EAAqBiB,mBAAQ,WACjC,OAAOC,KAAKC,MAAOvB,EAAOG,EAAS,OAClC,CAACH,EAAMG,IAEV,OACE,gCACE,cAAC,EAAD,CAASS,MAAM,wBAAf,SACE,cAAC,EAAD,CACEL,QAAS,CAAC,OAAQ,UAAW,OAC7BD,gBA3BgB,SAACG,GACvB,OAAQA,GACN,IAAK,OANyBS,GAAQ,SAAClB,GAAD,OAAUA,EAAO,KAQrD,MACF,IAAK,UAR4BmB,GAAW,SAAClB,GAAD,OAAaA,EAAU,KAUjE,MACF,IAAK,MAVwBmB,GAAO,SAAClB,GAAD,OAASA,EAAM,WAiCnD,cAAC,EAAD,CAASU,MAAM,aAAf,SACa,IAAVT,EACC,cAAC,EAAD,CAAcY,QAAS,sBAEvB,cAAC,EAAD,CACEZ,MAAOA,EACPC,mBAAoBA,EACpBJ,KAAMA,EACNC,QAASA,EACTC,IAAKA,UC5CFsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.028e1ea1.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const Statistics = (props) => {\r\n  const { good, neutral, bad, total, positivePercentage } = props\r\n\r\n  return (\r\n    <div>\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad} </p>\r\n      <p>Total: {total} </p>\r\n      <p>Positive feedback:{positivePercentage}% </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const FeedbackOptions = (props) => {\r\n  const { onLeaveFeedback, options } = props\r\n  return (\r\n    <div>\r\n      {options.map((name) => {\r\n        return (\r\n          <button onClick={() => onLeaveFeedback(name)} key={name}>\r\n            {name}\r\n          </button>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n  options: PropTypes.array.isRequired,\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const Section = (props) => {\r\n  const { title, children } = props\r\n\r\n  return (\r\n    <section>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </section>\r\n  )\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const Notification = ({ message }) => {\r\n  return <p>{message}</p>\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n}\r\n","import './App.css'\nimport { Component, useMemo, useState } from 'react'\nimport { Statistics } from './components/Statistics.js'\nimport { FeedbackOptions } from './components/FeedbackOptions.js'\nimport { Section } from './components/Section.js'\nimport { Notification } from './components/Notification.js'\n\nexport const App = () => {\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const handleGoodIncrement = () => setGood((good) => good + 1)\n  const handleNeutralIncrement = () => setNeutral((neutral) => neutral + 1)\n  const handleBadIncrement = () => setBad((bad) => bad + 1)\n\n  const handleIncrement = (name) => {\n    switch (name) {\n      case 'good':\n        handleGoodIncrement()\n        break\n      case 'neutral':\n        handleNeutralIncrement()\n        break\n      case 'bad':\n        handleBadIncrement()\n        break\n    }\n  }\n\n  const total = useMemo(() => {\n    return good + neutral + bad\n  }, [good, neutral, bad])\n\n  const positivePercentage = useMemo(() => {\n    return Math.round((good / total) * 100)\n  }, [good, total])\n\n  return (\n    <div>\n      <Section title=\"Please Leave feedback\">\n        <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={handleIncrement}\n        />\n      </Section>\n\n      <Section title=\"Statistics\">\n        {total === 0 ? (\n          <Notification message={'No feedback given'} />\n        ) : (\n          <Statistics\n            total={total}\n            positivePercentage={positivePercentage}\n            good={good}\n            neutral={neutral}\n            bad={bad}\n          />\n        )}\n      </Section>\n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}